<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>白山羊博客|异途的垦荒者</title>
  
  <subtitle>白山羊博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wginit.github.io/"/>
  <updated>2018-01-10T07:38:12.647Z</updated>
  <id>http://wginit.github.io/</id>
  
  <author>
    <name>Wginit</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018前端发展趋势</title>
    <link href="http://wginit.github.io/2018/01/09/2018%E5%89%8D%E7%AB%AF%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF/"/>
    <id>http://wginit.github.io/2018/01/09/2018前端发展趋势/</id>
    <published>2018-01-09T07:50:32.000Z</published>
    <updated>2018-01-10T07:38:12.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2018前端发展有哪些新趋势？"><a href="#2018前端发展有哪些新趋势？" class="headerlink" title="2018前端发展有哪些新趋势？"></a>2018前端发展有哪些新趋势？</h2><h3 id="1、HTML-5-2"><a href="#1、HTML-5-2" class="headerlink" title="1、HTML 5.2"></a>1、HTML 5.2</h3><p>不到一个月前，HTML 5.2成为正式的W3C推荐标准（REC），增加和删除了一些功能，具体改变可以在 <a href="https://www.w3.org/TR/html52/changes.html#changes" target="_blank" rel="noopener">HTML 5.2 Changes</a> 中查看。</p><blockquote><p>新功能</p></blockquote><p> 引入了本地<dialog>元素，一个本地的对话框标签</dialog></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dialog</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a Dialog<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dialog</span>&gt;</span></span><br></pre></td></tr></table></figure><p>目前<dialog>已经在Chrome和Opera中得到了支持。</dialog></p><blockquote><p>使用iFrames中的Payment Request API</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">allowpaymentrequest</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>尺寸的苹果图标</p></blockquote><p>要定义网页图标，我们使用<link rel="icon">文档头部的元素。要定义不同大小的图标，我们使用该sizes属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">sizes</span>=<span class="string">"16x16"</span> <span class="attr">href</span>=<span class="string">"path/to/icon16.png"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">sizes</span>=<span class="string">"32x32"</span> <span class="attr">href</span>=<span class="string">"path/to/icon32.png"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>多个<main>元素</main></p></blockquote><p>还有其他等等…</p><h3 id="2、PWA"><a href="#2、PWA" class="headerlink" title="2、PWA"></a>2、PWA</h3><p>Progressive Web App, 简称 PWA，由谷歌提出，用前沿的技术开发，是提升 Web App 的体验的一种新方法，能给用户原生应用的体验。<br>自从谷歌提出PWA后，就持续的获得了业界的关注，热度可见一斑。就在今年，谷歌也宣布：<a href="http://www.infoq.com/cn/news/2017/02/PWA-Chrome" target="_blank" rel="noopener">PWA将获得与安卓原生应用同等的待遇与权限</a>。这就意味着以后的网页基本和APP将越发将近，那么关注度将会进一步的上升。</p><p>资料参考：</p><blockquote><p>1、<a href="https://lavas.baidu.com/mip/doc/README" target="_blank" rel="noopener">什么是PWA？</a></p><p>2、<a href="https://zhuanlan.zhihu.com/p/25459319" target="_blank" rel="noopener">PWA 入门: 写个非常简单的 PWA 页面</a>（来源知乎）</p></blockquote><h3 id="3、Javascript的超集-TypeScript"><a href="#3、Javascript的超集-TypeScript" class="headerlink" title="3、Javascript的超集-TypeScript"></a>3、Javascript的超集-TypeScript</h3><p>TypeScript是一种由微软开发的自由和开源的编程语言。它是JavaScript的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。</p><p>angular已经开始使用typeScript进行开发，react和vue也进一步加深对typeScript的支持。相信在2018年，typeScript的火热也将程度猛增！</p><p>传送门：</p><blockquote><p>1、<a href="https://www.tslang.cn/" target="_blank" rel="noopener">TypeScript官网</a></p></blockquote><h3 id="4、下一代打包工具-parcel"><a href="#4、下一代打包工具-parcel" class="headerlink" title="4、下一代打包工具-parcel"></a>4、下一代打包工具-parcel</h3><p>Parcel 是一个Web应用程序 打包器(bundler) ，与以往的开发人员使用的打包器有所不同。它利用多核处理提供极快的性能，并且你不需要进行任何配置。<br>parcel的最大优势貌似就是webpack的最大劣势：配置和性能！parcel出乎了大多数人的意料，也算是2017的最大惊喜之一。</p><p>传送门</p><blockquote><p>1、<a href="http://www.css88.com/doc/parcel/" target="_blank" rel="noopener">Parcel中文文档</a></p></blockquote><h3 id="5、WebAssembly"><a href="#5、WebAssembly" class="headerlink" title="5、WebAssembly"></a>5、WebAssembly</h3><p>WebAssembly 是除了 JavaScript 以外，另一种可以在浏览器中执行的编程语言。由谷歌, 微软, Mozilla，苹果等公司合作的一个面向Web的通用二进制和文本格式的项目。2017年，chrome，火狐，IE，Safari四个浏览器也统一通过了WebAssembly的方案，相信在2018年会有更大的发展。目前知道研究得比较牛的有饿了么π团队的于航大佬。</p><p>传送门：</p><blockquote><p>1、<a href="http://webassembly.org/" target="_blank" rel="noopener">官网</a></p><p>2、<a href="https://www.zhihu.com/question/34186498?sort=created" target="_blank" rel="noopener">WebAssembly 的出现是不是意味着 Javascript 要完？</a></p></blockquote><h3 id="6、react-angular-vue三大主流框架"><a href="#6、react-angular-vue三大主流框架" class="headerlink" title="6、react,angular,vue三大主流框架"></a>6、react,angular,vue三大主流框架</h3><p>2017年，react发展的迅猛，vue更是扮演框架黑马的角色，而angular虽然关注度不如以前，但是不容忽视！react native目前也是很多人学习方向。<br>据统计，在国内，react使用第一，vue第二，不用框架的第三，angular第四，backbone第五</p><blockquote><p>无论如何，框架这个我觉得没有最好，只有最适合。三驾马车也没有说一定要全部都要会！一下就是，如果js基础好，学习框架会比较容易上手。如果极端得不学js，直接上手框架，会很吃力，很容易懵。</p></blockquote><p>传送门</p><blockquote><p>1、<a href="https://www.zhihu.com/question/35069742" target="_blank" rel="noopener">目前流行的前端框架？</a></p><p>2、<a href="http://web.jobbole.com/91583/" target="_blank" rel="noopener">最流行的5个前端框架对比</a></p></blockquote><h3 id="7、人工智能和大数据"><a href="#7、人工智能和大数据" class="headerlink" title="7、人工智能和大数据"></a>7、人工智能和大数据</h3><p>“大数据”这词热了十年，“人工智能”这词现在也火了一年。<br>人工智能和大数据，不是一门技术，而是一个领域，最近两年都很火，也不止于前端。我也觉得是互联网下一波的红利。非常值得关注与学习！这也是一个流行的趋势，因此一些数据可视化的工具（echart，D3等）和人工智能的库都得以收到关注！</p><p>传送门</p><blockquote><p>1、<a href="https://www.zhihu.com/question/21084385" target="_blank" rel="noopener">大数据是人工智能的开始吗？</a></p><p>2、<a href="http://www.360doc.com/content/17/0210/04/2472300_627933134.shtml" target="_blank" rel="noopener">大数据与人工智能（深度思考）</a></p></blockquote><h3 id="8、小程序"><a href="#8、小程序" class="headerlink" title="8、小程序"></a>8、小程序</h3><p>目前开发小程序主要有2大产商：微信小程序，支付宝小程序。微信自从问世以来，现在已经是许多民众必不可少的交流工具。对于微信小程序来说，是一种不需要下载安装就可以使用的应用软件，所以微信小程序的出现实现了触手可及的梦想，所以说用户使用起来特别的方便快捷，在最近的微信6.6.1更新中，直接把小程序提前到聊天列表上方，用户调用起来更加方便了。但支付宝小程序虽然关注度没那么高，但也不容小觑，随着马爸爸的新零售，无人超市的推广，支付宝小程序也会大有市场的。</p><p>传送门</p><blockquote><p>1、<a href="https://www.zhihu.com/question/57272970?answer_deleted_redirect=true" target="_blank" rel="noopener">小程序未来的发展怎么样？</a></p><p>2、<a href="http://www.hishop.com.cn/xiaocx/show_36604.html" target="_blank" rel="noopener">2017年微信小程序现状及未来发展趋势</a></p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>目前就写到这里了，后续有新的关注会持续更新。关于上面的，也希望大家不要盲目的去跟风，应打实好基础，后面不管技术方向怎么变，你永远比那些基础不扎实的掌握的要快。也希望大家对新鲜事物技术保持鲜度和热度，一起努力提高自己的技术栈。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2018前端发展有哪些新趋势？&quot;&gt;&lt;a href=&quot;#2018前端发展有哪些新趋势？&quot; class=&quot;headerlink&quot; title=&quot;2018前端发展有哪些新趋势？&quot;&gt;&lt;/a&gt;2018前端发展有哪些新趋势？&lt;/h2&gt;&lt;h3 id=&quot;1、HTML-5-2&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="前端发展" scheme="http://wginit.github.io/tags/%E5%89%8D%E7%AB%AF%E5%8F%91%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>axios发送Post、Get请求封装</title>
    <link href="http://wginit.github.io/2018/01/06/axios%E5%8F%91%E9%80%81Post%E3%80%81Get%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85/"/>
    <id>http://wginit.github.io/2018/01/06/axios发送Post、Get请求封装/</id>
    <published>2018-01-06T06:39:24.000Z</published>
    <updated>2018-01-06T07:32:30.139Z</updated>
    
    <content type="html"><![CDATA[<p>vue更新到2.0之后，作者就宣告不再对vue-resource更新，而是推荐的axios。对于习惯resource的不是不能用它，只是它的性能和安全性都不如axios，两者好比XP和Win7+。</p><h2 id="axios-简介"><a href="#axios-简介" class="headerlink" title="axios 简介"></a>axios 简介</h2><p>axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征：</p><blockquote><p>从浏览器中创建 XMLHttpRequest</p><p>从 node.js 发出 http 请求</p><p>支持 Promise API</p><p>拦截请求和响应</p><p>转换请求和响应数据</p><p>取消请求</p><p>自动转换JSON数据</p><p>客户端支持防止 CSRF/XSRF</p></blockquote><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p><img src="https://raw.githubusercontent.com/WGinit/Assets/master/axios1.jpg" alt="https://raw.githubusercontent.com/WGinit/Assets/master/axios1.jpg"></p><h2 id="axios-安装"><a href="#axios-安装" class="headerlink" title="axios 安装"></a>axios 安装</h2><p>通过npm:</p><blockquote><p>$ npm install axios</p></blockquote><p>通过 bower:</p><blockquote><p>$ bower install axios</p></blockquote><p>引用 cdn:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="axios-提供以下7种请求方式"><a href="#axios-提供以下7种请求方式" class="headerlink" title="axios 提供以下7种请求方式"></a>axios 提供以下7种请求方式</h2><blockquote><p>axios.request(config)</p><p>axios.get(url[, config])</p><p>axios.delete(url[, config])</p><p>axios.head(url[, config])</p><p>axios.post(url[, data[, config]])</p><p>axios.put(url[, data[, config]])</p><p>axios.patch(url[, data[, config]])</p></blockquote><p>这里主要介绍我们常用到的Get和Post请求。</p><h2 id="axios-Post和Get请求封装成axios-js"><a href="#axios-Post和Get请求封装成axios-js" class="headerlink" title="axios Post和Get请求封装成axios.js"></a>axios Post和Get请求封装成axios.js</h2><pre><code>import conf from &apos;./conf&apos;;import axios from &apos;axios&apos;;var qs = require(&quot;qs&quot;);  var oproto = Object.prototype;var serialize = oproto.toString;//http request 拦截器,发送前进行拦截axios.interceptors.request.use(  config =&gt; {    // const token = getCookie(&apos;名称&apos;);注意使用的时候需要引入cookie方法，推荐js-cookie    // config.data = JSON.stringify(config.data);    config.data = config.data;    config.headers = {      &apos;Content-Type&apos;:&apos;application/x-www-form-urlencoded; charset=utf-8&apos;    }    // if(token){    //   config.params = {&apos;token&apos;:token}    // }    console.log(&apos;你向后台发送请求，发送之前已拦截&apos;);    return config;  },  error =&gt; {    return Promise.reject(err);  });//http response 拦截器axios.interceptors.response.use(  response =&gt; {     if(response.data.errno == 0){        console.log(response.data);     }     if(response.data.errno == 1){       router.push({         path:&quot;/login&quot;,         querry:{redirect:router.currentRoute.fullPath}//从哪个页面跳转       })     }    return response;  },  error =&gt; {    return Promise.reject(error)  })var Rxports = {/**  * 封装axios，减少学习成本，参数基本跟jq ajax一致  * @param {String} type            请求的类型，默认post  * @param {String} url                请求地址  * @param {String} time            超时时间  * @param {Object} data            请求参数  * @param {String} dataType        预期服务器返回的数据类型，xml html json ...  * @param {Object} headers            自定义请求headers  * @param {Function} success        请求成功后，这里会有两个参数,服务器返回数据，返回状态，[data, res]  * @param {Function} error            发送请求前  * @param return     */ajax:function (opt){    var opts = opt || {};    if (!opts.url) {        alert(&apos;请填写接口地址&apos;);        return false;    }    axios({        method: opts.type || &apos;get&apos;,        url: opts.url,        params: opts.params || {},        data: qs.stringify(opts.data),        headers: opts.headers || {              &apos;Content-Type&apos;:&apos;application/x-www-form-urlencoded;charset=utf-8&apos;        },        // `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。          // 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL        baseURL:&apos;&apos;,        timeout: opts.time || 10*1000,        responseType: opts.dataType || &apos;json&apos;    }).then(function(res){        if(res.status == 200 ){            if(opts.success){                opts.success(res.data,res);            }        }else{            if (data.error) {                opts.error(error);            }else{                alert(&apos;获取数据失败，服务器错误&apos;);            }        }    }).catch(function (error){        console.log(error);        if (opts.error) {            opts.error(error);        }else{            alert(&quot;访问出错，服务器错误&quot;);        }    });},};export default Rxports;</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre><code> import Http from &apos;./axios.js; Http.ajax({     &apos;type&apos;:&apos;Get&apos;,    &apos;url&apos;: &apos;http://wginit.github.io&apos;,    &apos;data&apos;: this.formDate,    &apos;success&apos;: function(res){        console.log(res.data)    },    &apos;error&apos;: function(res){        console.log(res.error)    } })同理Post请求也如上形式</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>采用这样封装的好处是源于我们熟悉的jq的ajax模式，逻辑清晰明了，使我们在处理相关问题时得心应手。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vue更新到2.0之后，作者就宣告不再对vue-resource更新，而是推荐的axios。对于习惯resource的不是不能用它，只是它的性能和安全性都不如axios，两者好比XP和Win7+。&lt;/p&gt;
&lt;h2 id=&quot;axios-简介&quot;&gt;&lt;a href=&quot;#axios-
      
    
    </summary>
    
    
      <category term="Vue、axios" scheme="http://wginit.github.io/tags/Vue%E3%80%81axios/"/>
    
  </entry>
  
  <entry>
    <title>大家好，白山羊博客快一周岁了。</title>
    <link href="http://wginit.github.io/2018/01/05/%E5%A4%A7%E5%AE%B6%E5%A5%BD%EF%BC%8C%E7%99%BD%E5%B1%B1%E7%BE%8A%E5%8D%9A%E5%AE%A2%E5%BF%AB%E4%B8%80%E5%91%A8%E5%B2%81%E4%BA%86/"/>
    <id>http://wginit.github.io/2018/01/05/大家好，白山羊博客快一周岁了/</id>
    <published>2018-01-05T09:35:34.000Z</published>
    <updated>2018-01-06T06:36:56.507Z</updated>
    
    <content type="html"><![CDATA[<p>白山羊博客现在已一周岁了，一路跌跌爬爬，慢慢积累，已有上千访问量了。总体感觉还不错吧。<br>随着前端技术日新月异的发展，旧版的博客以不堪入目zz，所以今年想换了主题，采用了大家普遍用的hexo来搭的博客。</p><h2 id="白山羊博客2017访问量-http-lihua1108-com-统计：2018-1-5"><a href="#白山羊博客2017访问量-http-lihua1108-com-统计：2018-1-5" class="headerlink" title="白山羊博客2017访问量(http://lihua1108.com,统计：2018-1-5)"></a>白山羊博客2017访问量(<a href="http://lihua1108.com,统计：2018-1-5" target="_blank" rel="noopener">http://lihua1108.com,统计：2018-1-5</a>)</h2><p><img src="https://raw.githubusercontent.com/WGinit/Assets/master/1.jpg" alt="https://raw.githubusercontent.com/WGinit/Assets/master/1.jpg"></p><p>360搜索排名均在首屏：<br><img src="https://raw.githubusercontent.com/WGinit/Assets/master/2.jpg" alt="https://raw.githubusercontent.com/WGinit/Assets/master/2.jpg"><br><img src="https://raw.githubusercontent.com/WGinit/Assets/master/3.jpg" alt="https://raw.githubusercontent.com/WGinit/Assets/master/3.jpg"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> 从刚结束的2017年，我主要学习了：</p><blockquote><ul><li>框架</li><li>nodeJS</li><li>Vue+vuex+vux+vue-router+axios+mockjs</li><li>打包工具</li><li>webpack 打包旧网站</li><li>gulp 打包多页面</li><li>微信公众号开发及H5页面开发 </li><li>IE7+的低版本兼容</li></ul></blockquote><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>本网站主要辅助之前博客进行整理展示。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;白山羊博客现在已一周岁了，一路跌跌爬爬，慢慢积累，已有上千访问量了。总体感觉还不错吧。&lt;br&gt;随着前端技术日新月异的发展，旧版的博客以不堪入目zz，所以今年想换了主题，采用了大家普遍用的hexo来搭的博客。&lt;/p&gt;
&lt;h2 id=&quot;白山羊博客2017访问量-http-lih
      
    
    </summary>
    
    
      <category term="http://wginit.github.io" scheme="http://wginit.github.io/tags/http-wginit-github-io/"/>
    
  </entry>
  
</feed>
