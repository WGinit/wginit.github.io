<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>白山羊博客|异途的垦荒者</title>
  
  <subtitle>白山羊博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wginit.github.io/"/>
  <updated>2018-01-06T07:27:41.862Z</updated>
  <id>http://wginit.github.io/</id>
  
  <author>
    <name>Wginit</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>axios发送Post、Get请求封装</title>
    <link href="http://wginit.github.io/2018/01/06/axios%E5%8F%91%E9%80%81Post%E3%80%81Get%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85/"/>
    <id>http://wginit.github.io/2018/01/06/axios发送Post、Get请求封装/</id>
    <published>2018-01-06T06:39:24.000Z</published>
    <updated>2018-01-06T07:27:41.862Z</updated>
    
    <content type="html"><![CDATA[<p>vue更新到2.0之后，作者就宣告不再对vue-resource更新，而是推荐的axios。对于习惯resource的不是不能用它，只是它的性能和安全性都不如axios，两者好比XP和Win7+。</p><h2 id="axios-简介"><a href="#axios-简介" class="headerlink" title="axios 简介"></a>axios 简介</h2><p>axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征：</p><blockquote><ul><li>从浏览器中创建 XMLHttpRequest</li><li>从 node.js 发出 http 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防止 CSRF/XSRF</li></ul></blockquote><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p><img src="https://raw.githubusercontent.com/WGinit/Assets/master/axios1.jpg" alt="https://raw.githubusercontent.com/WGinit/Assets/master/axios1.jpg"></p><h2 id="axios-安装"><a href="#axios-安装" class="headerlink" title="axios 安装"></a>axios 安装</h2><p>通过npm:</p><blockquote><p>$ npm install axios</p></blockquote><p>通过 bower:</p><blockquote><p>$ bower install axios</p></blockquote><p>引用 cdn:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="axios-提供以下7种请求方式"><a href="#axios-提供以下7种请求方式" class="headerlink" title="axios 提供以下7种请求方式"></a>axios 提供以下7种请求方式</h2><ol><li><p>axios.request(config)</p></li><li><p>axios.get(url[, config])</p></li><li><p>axios.delete(url[, config])</p></li><li><p>axios.head(url[, config])</p></li><li><p>axios.post(url[, data[, config]])</p></li><li><p>axios.put(url[, data[, config]])</p></li><li><p>axios.patch(url[, data[, config]])</p></li></ol><p>这里主要介绍我们常用到的Get和Post请求。</p><h2 id="axios-Post和Get请求封装成axios-js"><a href="#axios-Post和Get请求封装成axios-js" class="headerlink" title="axios Post和Get请求封装成axios.js"></a>axios Post和Get请求封装成axios.js</h2><pre><code>import conf from &apos;./conf&apos;;import axios from &apos;axios&apos;;var qs = require(&quot;qs&quot;);  var oproto = Object.prototype;var serialize = oproto.toString;//http request 拦截器,发送前进行拦截axios.interceptors.request.use(  config =&gt; {    // const token = getCookie(&apos;名称&apos;);注意使用的时候需要引入cookie方法，推荐js-cookie    // config.data = JSON.stringify(config.data);    config.data = config.data;    config.headers = {      &apos;Content-Type&apos;:&apos;application/x-www-form-urlencoded; charset=utf-8&apos;    }    // if(token){    //   config.params = {&apos;token&apos;:token}    // }    console.log(&apos;你向后台发送请求，发送之前已拦截&apos;);    return config;  },  error =&gt; {    return Promise.reject(err);  });//http response 拦截器axios.interceptors.response.use(  response =&gt; {     if(response.data.errno == 0){        console.log(response.data);     }     if(response.data.errno == 1){       router.push({         path:&quot;/login&quot;,         querry:{redirect:router.currentRoute.fullPath}//从哪个页面跳转       })     }    return response;  },  error =&gt; {    return Promise.reject(error)  })var Rxports = {/**  * 封装axios，减少学习成本，参数基本跟jq ajax一致  * @param {String} type            请求的类型，默认post  * @param {String} url                请求地址  * @param {String} time            超时时间  * @param {Object} data            请求参数  * @param {String} dataType        预期服务器返回的数据类型，xml html json ...  * @param {Object} headers            自定义请求headers  * @param {Function} success        请求成功后，这里会有两个参数,服务器返回数据，返回状态，[data, res]  * @param {Function} error            发送请求前  * @param return     */ajax:function (opt){    var opts = opt || {};    if (!opts.url) {        alert(&apos;请填写接口地址&apos;);        return false;    }    axios({        method: opts.type || &apos;get&apos;,        url: opts.url,        params: opts.params || {},        data: qs.stringify(opts.data),        headers: opts.headers || {              &apos;Content-Type&apos;:&apos;application/x-www-form-urlencoded;charset=utf-8&apos;        },        // `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。          // 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL        baseURL:&apos;&apos;,        timeout: opts.time || 10*1000,        responseType: opts.dataType || &apos;json&apos;    }).then(function(res){        if(res.status == 200 ){            if(opts.success){                opts.success(res.data,res);            }        }else{            if (data.error) {                opts.error(error);            }else{                alert(&apos;获取数据失败，服务器错误&apos;);            }        }    }).catch(function (error){        console.log(error);        if (opts.error) {            opts.error(error);        }else{            alert(&quot;访问出错，服务器错误&quot;);        }    });},};export default Rxports;</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre><code> import Http from &apos;./axios.js; Http.ajax({     &apos;type&apos;:&apos;Get&apos;,    &apos;url&apos;: &apos;http://wginit.github.io&apos;,    &apos;data&apos;: this.formDate,    &apos;success&apos;: function(res){        console.log(res.data)    },    &apos;error&apos;: function(res){        console.log(res.error)    } })同理Post请求也如上形式</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>采用这样封装的好处是源于我们熟悉的jq的ajax模式，逻辑清晰明了，使我们在处理相关问题时得心应手。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vue更新到2.0之后，作者就宣告不再对vue-resource更新，而是推荐的axios。对于习惯resource的不是不能用它，只是它的性能和安全性都不如axios，两者好比XP和Win7+。&lt;/p&gt;
&lt;h2 id=&quot;axios-简介&quot;&gt;&lt;a href=&quot;#axios-
      
    
    </summary>
    
    
      <category term="Vue、axios" scheme="http://wginit.github.io/tags/Vue%E3%80%81axios/"/>
    
  </entry>
  
  <entry>
    <title>大家好，白山羊博客快一周岁了。</title>
    <link href="http://wginit.github.io/2018/01/05/%E5%A4%A7%E5%AE%B6%E5%A5%BD%EF%BC%8C%E7%99%BD%E5%B1%B1%E7%BE%8A%E5%8D%9A%E5%AE%A2%E5%BF%AB%E4%B8%80%E5%91%A8%E5%B2%81%E4%BA%86/"/>
    <id>http://wginit.github.io/2018/01/05/大家好，白山羊博客快一周岁了/</id>
    <published>2018-01-05T09:35:34.000Z</published>
    <updated>2018-01-06T06:36:56.507Z</updated>
    
    <content type="html"><![CDATA[<p>白山羊博客现在已一周岁了，一路跌跌爬爬，慢慢积累，已有上千访问量了。总体感觉还不错吧。<br>随着前端技术日新月异的发展，旧版的博客以不堪入目zz，所以今年想换了主题，采用了大家普遍用的hexo来搭的博客。</p><h2 id="白山羊博客2017访问量-http-lihua1108-com-统计：2018-1-5"><a href="#白山羊博客2017访问量-http-lihua1108-com-统计：2018-1-5" class="headerlink" title="白山羊博客2017访问量(http://lihua1108.com,统计：2018-1-5)"></a>白山羊博客2017访问量(<a href="http://lihua1108.com,统计：2018-1-5" target="_blank" rel="noopener">http://lihua1108.com,统计：2018-1-5</a>)</h2><p><img src="https://raw.githubusercontent.com/WGinit/Assets/master/1.jpg" alt="https://raw.githubusercontent.com/WGinit/Assets/master/1.jpg"></p><p>360搜索排名均在首屏：<br><img src="https://raw.githubusercontent.com/WGinit/Assets/master/2.jpg" alt="https://raw.githubusercontent.com/WGinit/Assets/master/2.jpg"><br><img src="https://raw.githubusercontent.com/WGinit/Assets/master/3.jpg" alt="https://raw.githubusercontent.com/WGinit/Assets/master/3.jpg"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> 从刚结束的2017年，我主要学习了：</p><blockquote><ul><li>框架</li><li>nodeJS</li><li>Vue+vuex+vux+vue-router+axios+mockjs</li><li>打包工具</li><li>webpack 打包旧网站</li><li>gulp 打包多页面</li><li>微信公众号开发及H5页面开发 </li><li>IE7+的低版本兼容</li></ul></blockquote><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>本网站主要辅助之前博客进行整理展示。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;白山羊博客现在已一周岁了，一路跌跌爬爬，慢慢积累，已有上千访问量了。总体感觉还不错吧。&lt;br&gt;随着前端技术日新月异的发展，旧版的博客以不堪入目zz，所以今年想换了主题，采用了大家普遍用的hexo来搭的博客。&lt;/p&gt;
&lt;h2 id=&quot;白山羊博客2017访问量-http-lih
      
    
    </summary>
    
    
      <category term="http://wginit.github.io" scheme="http://wginit.github.io/tags/http-wginit-github-io/"/>
    
  </entry>
  
</feed>
